diff --git a/ArmPlatformPkg/PrePeiCore/MainUniCore.c b/ArmPlatformPkg/PrePeiCore/MainUniCore.c
index 1c2580e..860752a 100644
--- a/ArmPlatformPkg/PrePeiCore/MainUniCore.c
+++ b/ArmPlatformPkg/PrePeiCore/MainUniCore.c
@@ -7,6 +7,8 @@
 **/
 
 #include "PrePeiCore.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
 
 VOID
 EFIAPI
@@ -52,6 +54,14 @@ PrimaryMain (
   SecCoreData.StackBase              = (VOID *)((UINTN)SecCoreData.TemporaryRamBase + SecCoreData.PeiTemporaryRamSize);
   SecCoreData.StackSize              = (TemporaryRamBase + TemporaryRamSize) - (UINTN)SecCoreData.StackBase;
 
+  {
+    CHAR8 Buffer[64];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "Oracle AAVMF Version: 1.6.6\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   // Jump to PEI core entry point
   (PeiCoreEntryPoint)(&SecCoreData, PpiList);
 }
diff --git a/MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf b/MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf
index e317169..4fb8db8 100644
--- a/MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf
+++ b/MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf
@@ -73,6 +73,8 @@
   BaseLib
   UefiDriverEntryPoint
   DebugLib
+  PrintLib
+  SerialPortLib
 
 [Protocols]
   gEfiPciHotPlugRequestProtocolGuid               ## SOMETIMES_PRODUCES
diff --git a/MdeModulePkg/Bus/Pci/PciBusDxe/PciEnumerator.c b/MdeModulePkg/Bus/Pci/PciBusDxe/PciEnumerator.c
index 3f8c6e6..9dff4d9 100644
--- a/MdeModulePkg/Bus/Pci/PciBusDxe/PciEnumerator.c
+++ b/MdeModulePkg/Bus/Pci/PciBusDxe/PciEnumerator.c
@@ -8,6 +8,10 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "PciBus.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
+
+extern UINTN mPciScanLevel; 
 
 /**
   This routine is used to enumerate entire pci bus system
@@ -208,6 +212,17 @@ PciRootBridgeEnumerator (
     StartBusNumber
     );
 
+  if (mPciScanLevel == 2) {
+    CHAR8 Buffer[64];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "PciBus: [%02x|%02x|%02x]\n",
+          RootBridgeDev->BusNumber,
+          RootBridgeDev->DeviceNumber,
+          RootBridgeDev->FunctionNumber);
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   //
   // Assign bus number
   //
diff --git a/MdeModulePkg/Bus/Pci/PciBusDxe/PciLib.c b/MdeModulePkg/Bus/Pci/PciBusDxe/PciLib.c
index 63d149b..5392691 100644
--- a/MdeModulePkg/Bus/Pci/PciBusDxe/PciLib.c
+++ b/MdeModulePkg/Bus/Pci/PciBusDxe/PciLib.c
@@ -8,6 +8,10 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "PciBus.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
+
+UINTN mPciScanLevel = 1;
 
 GLOBAL_REMOVE_IF_UNREFERENCED
 CHAR16  *mBarTypeStr[] = {
@@ -1173,6 +1177,20 @@ PciScanBus (
           PciDevice->FunctionNumber,
           EfiPciBeforeChildBusEnumeration
           );
+  if (mPciScanLevel == 2) {
+    CHAR8 Buffer[64];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "PciDev [%04x:%04x:%04x:%04x]: [%02x|%02x|%02x]\n",
+          PciDevice->Pci.Hdr.VendorId,
+          PciDevice->Pci.Hdr.DeviceId,
+          PciDevice->Pci.Device.SubsystemVendorID,
+          PciDevice->Pci.Device.SubsystemID,
+          PciDevice->BusNumber,
+          PciDevice->DeviceNumber,
+          PciDevice->FunctionNumber);
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
       }
 
       if (FeaturePcdGet (PcdPciBusHotplugDeviceSupport)) {
@@ -1637,6 +1655,13 @@ PciHostBridgeEnumerator (
       return Status;
     }
 
+  {
+    CHAR8 Buffer[32];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "PCI Info:\n");
+    SerialPortWrite((UINT8 *)Buffer, Length);
+    mPciScanLevel = 2;
+  }
     DEBUG ((DEBUG_INFO, "PCI Bus Second Scanning\n"));
     RootBridgeHandle = NULL;
     while (PciResAlloc->GetNextRootBridge (PciResAlloc, &RootBridgeHandle) == EFI_SUCCESS) {
diff --git a/MdeModulePkg/Core/Dxe/DxeMain.inf b/MdeModulePkg/Core/Dxe/DxeMain.inf
index e4bca89..11ae16e 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain.inf
+++ b/MdeModulePkg/Core/Dxe/DxeMain.inf
@@ -94,6 +94,8 @@
   DebugAgentLib
   CpuExceptionHandlerLib
   PcdLib
+  PrintLib
+  SerialPortLib
 
 [Guids]
   gEfiEventMemoryMapChangeGuid                  ## PRODUCES             ## Event
diff --git a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
index 2c27fc0..21a05c6 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
+++ b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
@@ -7,6 +7,8 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "DxeMain.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
 
 //
 // DXE Core Global Variables for Protocols from PEI
@@ -517,6 +519,15 @@ DxeMain (
   //
   CoreInitializeDispatcher ();
 
+
+  {
+    CHAR8 Buffer[32];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "Loading DXE Modules:\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+
+  }
   //
   // Invoke the DXE Dispatcher
   //
@@ -561,6 +572,15 @@ DxeMain (
     (EFI_SOFTWARE_DXE_CORE | EFI_SW_DXE_CORE_PC_HANDOFF_TO_NEXT)
     );
 
+
+  {
+    CHAR8 Buffer[32];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "DXE Phase: Complete.\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   //
   // Transfer control to the BDS Architectural Protocol
   //
diff --git a/MdeModulePkg/Core/Dxe/Image/Image.c b/MdeModulePkg/Core/Dxe/Image/Image.c
index 68bde5c..53df259 100644
--- a/MdeModulePkg/Core/Dxe/Image/Image.c
+++ b/MdeModulePkg/Core/Dxe/Image/Image.c
@@ -8,6 +8,9 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 
 #include "DxeMain.h"
 #include "Image.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
+
 
 //
 // Module Globals
@@ -870,6 +873,14 @@ CoreLoadPeImage (
     }
 
     DEBUG ((DEBUG_INFO | DEBUG_LOAD, "%a", EfiFileName));   // &Image->ImageContext.PdbPointer[StartIndex]));
+
+  {
+    CHAR8 Buffer[290];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "Image Loaded: %a\n", EfiFileName);
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   }
 
   DEBUG ((DEBUG_INFO | DEBUG_LOAD, "\n"));
diff --git a/MdeModulePkg/Core/Pei/Image/Image.c b/MdeModulePkg/Core/Pei/Image/Image.c
index cee9f09..9839fa1 100644
--- a/MdeModulePkg/Core/Pei/Image/Image.c
+++ b/MdeModulePkg/Core/Pei/Image/Image.c
@@ -7,6 +7,9 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "PeiMain.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
+#include <Library/IoLib.h>
 
 EFI_PEI_LOAD_FILE_PPI  mPeiLoadImagePpi = {
   PeiLoadImageLoadImageWrapper
@@ -585,6 +588,31 @@ PeiGetPe32Data (
   return Status;
 }
 
+#if defined (MDE_CPU_IA32) || defined (MDE_CPU_X64)
+STATIC
+UINT8
+CmosRead8 (
+  IN      UINTN  Index
+  )
+{
+  IoWrite8 (0x70, (UINT8)Index);
+  return IoRead8 (0x71);
+}
+#endif
+
+STATIC
+BOOLEAN
+IsS3Resume (
+  VOID
+  )
+{
+#if defined (MDE_CPU_IA32) || defined (MDE_CPU_X64)
+  return (CmosRead8 (0xF) == 0xFE);
+#else
+  return FALSE;
+#endif
+}
+
 /**
   Loads a PEIM into memory for subsequent execution. If there are compressed
   images or images that need to be relocated into memory for performance reasons,
@@ -623,6 +651,7 @@ PeiLoadImageLoadImage (
   UINT16                Machine;
   EFI_SECTION_TYPE      SearchType1;
   EFI_SECTION_TYPE      SearchType2;
+  PEI_CORE_INSTANCE    *Private;
 
   *EntryPoint          = 0;
   ImageSize            = 0;
@@ -762,6 +791,16 @@ PeiLoadImageLoadImage (
     }
 
     DEBUG ((DEBUG_INFO | DEBUG_LOAD, "%a", EfiFileName));
+
+  // During PEI, need to use both methods to check for S3
+  Private = PEI_CORE_INSTANCE_FROM_PS_THIS (GetPeiServicesTablePointer ());
+  if (!IsS3Resume() && Private->HobList.HandoffInformationTable->BootMode != BOOT_ON_S3_RESUME) {
+    CHAR8 Buffer[290];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "PEIM Loaded: %a\n", EfiFileName);
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   }
 
   DEBUG_CODE_END ();
diff --git a/MdeModulePkg/Core/Pei/PeiMain.inf b/MdeModulePkg/Core/Pei/PeiMain.inf
index 0cf3573..1b5bd59 100644
--- a/MdeModulePkg/Core/Pei/PeiMain.inf
+++ b/MdeModulePkg/Core/Pei/PeiMain.inf
@@ -58,6 +58,7 @@
   PeiServicesLib
   PerformanceLib
   HobLib
+  IoLib
   BaseLib
   PeiCoreEntryPoint
   DebugLib
@@ -66,6 +67,8 @@
   PeCoffLib
   PeiServicesTablePointerLib
   PcdLib
+  PrintLib
+  SerialPortLib
 
 [Guids]
   gPeiAprioriFileNameGuid       ## SOMETIMES_CONSUMES   ## File
diff --git a/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c b/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
index bf1719d..56685a1 100644
--- a/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
+++ b/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
@@ -7,6 +7,8 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "PeiMain.h"
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
 
 EFI_PEI_PPI_DESCRIPTOR  mMemoryDiscoveredPpi = {
   (EFI_PEI_PPI_DESCRIPTOR_PPI | EFI_PEI_PPI_DESCRIPTOR_TERMINATE_LIST),
@@ -522,6 +524,14 @@ PeiCore (
     CpuDeadLoop ();
   }
 
+  if (PrivateData.HobList.HandoffInformationTable->BootMode != BOOT_ON_S3_RESUME) {
+    CHAR8 Buffer[32];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "PEI Phase: Complete.\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   //
   // Enter DxeIpl to load Dxe core.
   //
diff --git a/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf b/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
index 5bac635..9bf2e16 100644
--- a/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
+++ b/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
@@ -37,6 +37,7 @@
 [Packages]
   MdePkg/MdePkg.dec
   MdeModulePkg/MdeModulePkg.dec
+  SecurityPkg/SecurityPkg.dec
 
 [LibraryClasses]
   DevicePathLib
@@ -54,6 +55,7 @@
   PlatformBootManagerLib
   PcdLib
   PrintLib
+  SerialPortLib
 
 [Guids]
   gEfiGlobalVariableGuid                        ## SOMETIMES_PRODUCES ## Variable:L"BootNext" (The number of next boot option)
@@ -74,6 +76,7 @@
   gConnectConInEventGuid                        ## SOMETIMES_CONSUMES ## Event
   gEdkiiStatusCodeDataTypeVariableGuid          ## SOMETIMES_CONSUMES ## GUID
   gEfiEventReadyToBootGuid                      ## CONSUMES           ## Event
+  gEfiSecureBootEnableDisableGuid
 
 [Protocols]
   gEfiBdsArchProtocolGuid                       ## PRODUCES
diff --git a/MdeModulePkg/Universal/BdsDxe/BdsEntry.c b/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
index 766dde3..dff3b76 100644
--- a/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
+++ b/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
@@ -16,6 +16,10 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include "Language.h"
 #include "HwErrRecSupport.h"
 #include <Library/VariablePolicyHelperLib.h>
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
+#include <Guid/AuthenticatedVariableFormat.h>
+#include <Library/UefiLib.h>
 
 #define SET_BOOT_OPTION_SUPPORT_KEY_COUNT(a, c)  { \
       (a) = ((a) & ~EFI_BOOT_OPTION_SUPPORT_COUNT) | (((c) << LowBitSet32 (EFI_BOOT_OPTION_SUPPORT_COUNT)) & EFI_BOOT_OPTION_SUPPORT_COUNT); \
@@ -978,13 +982,64 @@ BdsEntry (
         LoadOptions[Index].Attributes
         ));
     }
-
     EfiBootManagerFreeLoadOptions (LoadOptions, LoadOptionCount);
   }
 
   DEBUG ((DEBUG_INFO, "[Bds]=============End Load Options Dumping=============\n"));
   DEBUG_CODE_END ();
 
+{
+  CHAR8 Buffer[256];
+  UINTN Length;
+  UINT16  *BootNext = NULL;
+  UINT8  *SecureBootEnable = NULL;
+  CHAR16 *DevPathString;
+
+  GetVariable2 (EFI_SECURE_BOOT_ENABLE_NAME, &gEfiSecureBootEnableDisableGuid, (VOID **)&SecureBootEnable, NULL);
+  if (SecureBootEnable != NULL && (*SecureBootEnable == SECURE_BOOT_ENABLE))
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "SecureBoot: Enabled\n"); 
+  else
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "SecureBoot: Disabled\n"); 
+
+  if (SecureBootEnable != NULL)
+    FreePool (SecureBootEnable);
+
+  SerialPortWrite((UINT8 *)Buffer, Length);
+
+  LoadOptions = EfiBootManagerGetLoadOptions (&LoadOptionCount, LoadOptionTypeBoot);
+  Length = AsciiSPrint (Buffer, sizeof Buffer, "%s Options:\n", mBdsLoadOptionName[LoadOptionTypeBoot]); 
+  SerialPortWrite((UINT8 *)Buffer, Length);
+  for (Index = 0; Index < LoadOptionCount; Index++) {
+    if ((LoadOptions[Index].Attributes & LOAD_OPTION_CATEGORY) != LOAD_OPTION_CATEGORY_BOOT)
+      continue;
+
+    DevPathString = ConvertDevicePathToText (LoadOptions[Index].FilePath, TRUE, TRUE);
+
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "   %s%04x: %s  <%s>\n",
+      mBdsLoadOptionName[LoadOptionTypeBoot],
+      LoadOptions[Index].OptionNumber,
+      LoadOptions[Index].Description,
+      ((DevPathString) ? DevPathString : L"Unavailable")); 
+
+    if (DevPathString)
+      FreePool (DevPathString);
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+  EfiBootManagerFreeLoadOptions (LoadOptions, LoadOptionCount);
+
+  GetEfiGlobalVariable2 (L"BootNext", (VOID **)&BootNext, NULL);
+  if (BootNext == NULL) {
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "BootNext: \n"); 
+  } else {
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "BootNext: %04x\n", *BootNext); 
+    FreePool (BootNext);
+  }
+
+  SerialPortWrite((UINT8 *)Buffer, Length);
+
+}
+
   //
   // BootManagerMenu doesn't contain the correct information when return status is EFI_NOT_FOUND.
   //
diff --git a/OvmfPkg/Library/PlatformBmPrintScLib/StatusCodeHandler.c b/OvmfPkg/Library/PlatformBmPrintScLib/StatusCodeHandler.c
index 065673d..1d0748f 100644
--- a/OvmfPkg/Library/PlatformBmPrintScLib/StatusCodeHandler.c
+++ b/OvmfPkg/Library/PlatformBmPrintScLib/StatusCodeHandler.c
@@ -206,18 +206,16 @@ HandleStatusCode (
   //
   if ((Value == mLoadPrep) || (Value == mStartPrep)) {
     Print (
-      L"%a: %a %s \"%s\" from %s\n",
-      gEfiCallerBaseName,
-      Value == mLoadPrep ? "loading" : "starting",
+      L"%a %s \"%s\" from %s\n",
+      Value == mLoadPrep ? "Loading" : "Starting",
       BootOptionName,
       BmBootOption.Description,
       DevPathString
       );
   } else {
     Print (
-      L"%a: failed to %a %s \"%s\" from %s: %r\n",
-      gEfiCallerBaseName,
-      Value == mLoadFail ? "load" : "start",
+      L"Failed to %a %s \"%s\" from %s: %r\n",
+      Value == mLoadFail ? "Load" : "Start",
       BootOptionName,
       BmBootOption.Description,
       DevPathString,
diff --git a/OvmfPkg/Sec/SecMain.c b/OvmfPkg/Sec/SecMain.c
index 2c55616..1c60969 100644
--- a/OvmfPkg/Sec/SecMain.c
+++ b/OvmfPkg/Sec/SecMain.c
@@ -26,6 +26,8 @@
 #include <Library/ExtractGuidedSectionLib.h>
 #include <Library/LocalApicLib.h>
 #include <Library/CpuExceptionHandlerLib.h>
+#include <Library/SerialPortLib.h>
+#include <Library/PrintLib.h>
 
 #include <Ppi/TemporaryRamSupport.h>
 
@@ -738,6 +740,14 @@ SecCoreStartupWithStack (
   UINT32                Index;
   volatile UINT8        *Table;
 
+  if (!IsS3Resume()) {
+    CHAR8 Buffer[64];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "Oracle OVMF Version: 1.6.6\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   //
   // To ensure SMM can't be compromised on S3 resume, we must force re-init of
   // the BaseExtractGuidedSectionLib. Since this is before library contructors
@@ -916,6 +926,14 @@ SecStartupPhase2 (
   SecCoreData->BootFirmwareVolumeBase = BootFv;
   SecCoreData->BootFirmwareVolumeSize = (UINTN)BootFv->FvLength;
 
+  if (!IsS3Resume()) {
+    CHAR8 Buffer[32];
+    UINTN Length;
+    Length = AsciiSPrint (Buffer, sizeof Buffer, "SEC Phase: Complete.\n");
+
+    SerialPortWrite((UINT8 *)Buffer, Length);
+  }
+
   //
   // Transfer the control to the PEI core
   //
diff --git a/OvmfPkg/Sec/SecMain.inf b/OvmfPkg/Sec/SecMain.inf
index 95cf002..8a93971 100644
--- a/OvmfPkg/Sec/SecMain.inf
+++ b/OvmfPkg/Sec/SecMain.inf
@@ -54,6 +54,8 @@
   LocalApicLib
   MemEncryptSevLib
   CpuExceptionHandlerLib
+  PrintLib
+  SerialPortLib
 
 [Ppis]
   gEfiTemporaryRamSupportPpiGuid                # PPI ALWAYS_PRODUCED
