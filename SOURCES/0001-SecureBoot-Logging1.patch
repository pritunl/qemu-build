diff --git a/MdePkg/Library/BaseDebugLibSerialPort/DebugLib.c b/MdePkg/Library/BaseDebugLibSerialPort/DebugLib.c
index bd56869..30b101e 100644
--- a/MdePkg/Library/BaseDebugLibSerialPort/DebugLib.c
+++ b/MdePkg/Library/BaseDebugLibSerialPort/DebugLib.c
@@ -24,7 +24,7 @@
 //
 // Define the maximum debug and assert message length that this library supports
 //
-#define MAX_DEBUG_MESSAGE_LENGTH  0x100
+#define MAX_DEBUG_MESSAGE_LENGTH  0x200
 
 //
 // VA_LIST can not initialize to NULL for all compiler, so we use this to
diff --git a/MdePkg/Library/DxeRuntimeDebugLibSerialPort/DebugLib.c b/MdePkg/Library/DxeRuntimeDebugLibSerialPort/DebugLib.c
index 11d188d..9b7afd7 100644
--- a/MdePkg/Library/DxeRuntimeDebugLibSerialPort/DebugLib.c
+++ b/MdePkg/Library/DxeRuntimeDebugLibSerialPort/DebugLib.c
@@ -26,7 +26,7 @@ STATIC BOOLEAN    mEfiAtRuntime = FALSE;
 //
 // Define the maximum debug and assert message length that this library supports
 //
-#define MAX_DEBUG_MESSAGE_LENGTH  0x100
+#define MAX_DEBUG_MESSAGE_LENGTH  0x200
 
 //
 // VA_LIST can not initialize to NULL for all compiler, so we use this to
diff --git a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
index b3d40c2..9b313b8 100644
--- a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
+++ b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
@@ -19,6 +19,7 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 **/
 
 #include "DxeImageVerificationLib.h"
+#include <Library/QemuFwCfgSimpleParserLib.h>
 
 //
 // Caution: This is used by a function which may receive untrusted input.
@@ -90,6 +91,550 @@ SecureBootHook (
   IN VOID      *Data
   );
 
+// Additional mSecureBootEnable variable state to indicate that we have yet to read or
+// were unable to read the Secureboot variable value which can happen early in the boot flow.
+#define SECURE_BOOT_MODE_UNKNOWN           2
+
+#define MemCpy CopyMem
+UINT8     mSecureBootEnable = SECURE_BOOT_MODE_UNKNOWN;
+BOOLEAN   mOracleOCIEnabled = FALSE;
+BOOLEAN   mValidationFailed = FALSE;
+BOOLEAN   mSBLogInitComplete = FALSE;
+
+
+VOID
+SetOracleOCIEnabled(
+  VOID
+  )
+{
+  UINT8                FwCfg_OciEnable = 0;
+  EFI_STATUS           Status;
+
+  // Check for OCI-ENABLE fw-cfg option - which is set only in OCI env.
+  Status = QemuFwCfgParseUint8("opt/ovmf/OCI-ENABLE", TRUE, &FwCfg_OciEnable);
+  if (Status == EFI_SUCCESS && FwCfg_OciEnable)
+    mOracleOCIEnabled = TRUE;
+
+  DEBUG ((DEBUG_INFO, "SetOracleOCIEnabled: mOracleOCIEnabled = %d\n", mOracleOCIEnabled));
+}
+
+VOID
+OracleGetCertSubject (
+  IN EFI_SIGNATURE_DATA        *Cert,
+  IN UINTN                     CertSize,
+  OUT UINT8                  **CertSubject
+  )
+{
+  EFI_STATUS          Status;
+  CHAR8              *Subject;
+  UINTN               SubjectSize;
+  BOOLEAN             FoundSubject = FALSE;
+
+  if (Cert == NULL || CertSize == 0)
+    return;
+
+  SubjectSize = 0;
+  Status = X509GetCommonName((CONST UINT8  *)Cert, CertSize, NULL, &SubjectSize);
+  if (Status == EFI_BUFFER_TOO_SMALL && SubjectSize) {
+    Subject = (CHAR8 *)AllocatePool (SubjectSize);
+    ASSERT (Subject != NULL);
+    Status = X509GetCommonName ((CONST UINT8  *)Cert, CertSize, Subject, &SubjectSize);
+    if (Status == EFI_SUCCESS)
+      FoundSubject = TRUE;
+    else
+      FreePool(Subject);
+  }
+
+  if (FoundSubject) {
+    *CertSubject = (UINT8 *)Subject;
+    DEBUG ((DEBUG_INFO, "OracleGetCertSubject: %a.\n", Subject));
+  } else {
+    *CertSubject = (UINT8 *)"<NOT_FOUND>";
+  }
+
+  return;
+}
+
+VOID  OrclSendMsgToSerialConsole(
+    UINT8    *Buffer
+    )
+{
+  UINTN Length;
+
+  Length = 0;
+  while (Buffer[Length] != 0)
+    Length++;
+
+  SerialPortWrite(Buffer, Length);
+
+  return;
+}
+
+VOID  OrclSendMsgToDebugLog(
+    UINT8    *Buffer
+    )
+{
+  // Send to the debug log on x86_64
+  DEBUG ((DEBUG_INFO, "%a", Buffer));
+}
+
+VOID  OrclSendMsg(
+    UINT8    *Buffer
+    )
+{
+
+  // Send the message to the serial console
+  OrclSendMsgToSerialConsole(Buffer);
+
+  // Send the message to the DEBUG log
+  OrclSendMsgToDebugLog(Buffer);
+
+}
+
+VOID
+OracleSendSBAttemptStatus(VOID)
+{
+  UINT8       Buffer [128];
+  UINT8       i = 0;
+  CHAR8       Str1[] = {'\r','\n','S','B','_','E','V','E','N','T',':',' ','{',' '};
+  CHAR8       Str2[] = {'"','S','e','c','u','r','e','_','B','o','o','t','_','A','t','t','e','m','p','t','_','S','t','a','t','u','s','"',' ',':',' '};
+  CHAR8       Str3[] = {'"','E','n','a','b','l','e','d','"'};
+  CHAR8       Str4[] = {'"','D','i','s','a','b','l','e','d','"'};
+  CHAR8       Str5[] = {',',' ','"','s','t','a','t','u','s','"',' ',':',' '};
+  CHAR8       Str6[] = {',',' ','"','m','s','g','"',' ',':',' ','"','S','e','c','u','r','e',' ','B','o','o','t',' ','A','t','t','e','m','p','t',' ','S','t','a','t','u','s','"',' ','}','\r','\n','\0'};
+
+
+  // Create a message to be sent to com1
+  i=0;
+  MemCpy (Buffer + i, Str1, sizeof(Str1));    //"SB_EVENT: "
+  i += sizeof(Str1);
+
+  MemCpy (Buffer + i, Str2, sizeof(Str2));    // "Secure_Boot_Attempt_Status"
+  i += sizeof(Str2);
+  Buffer[i++] = mSecureBootEnable + '0';
+
+  MemCpy (Buffer + i, Str5, sizeof(Str5));    // "Status"
+  i += sizeof(Str5);
+
+  if(mSecureBootEnable == SECURE_BOOT_MODE_ENABLE){
+    MemCpy (Buffer + i, Str3, sizeof(Str3));  // "Enabled"
+    i += sizeof(Str3);
+  } else {
+    MemCpy (Buffer + i, Str4, sizeof(Str4));  // "Disabled"
+    i += sizeof(Str4);
+  }
+
+  MemCpy (Buffer + i, Str6, sizeof(Str6));    // "msg" : "Secure Boot Attempt Status"
+
+  OrclSendMsg(Buffer);
+
+  return;
+}
+
+VOID
+EFIAPI
+OrclSblOnExitBootServices (
+  IN EFI_EVENT    Event,
+  IN VOID         *Context
+  )
+{
+  UINT8       Buffer [128];
+  UINT8       i = 0;
+  CHAR8       Str1[] = {'\r','\n','S','B','_','E','V','E','N','T',':',' ','{',' '};
+  CHAR8       Str2[] = {'"','S','e','c','u','r','e','_','B','o','o','t','_','O','v','e','r','a','l','l','_','S','t','a','t','u','s','"',' ',':',' '};
+  CHAR8       Str3[] = {'"','P','a','s','s','"'};
+  CHAR8       Str4[] = {'"','F','a','i','l','"'};
+  CHAR8       Str5[] = {',',' ','"','s','t','a','t','u','s','"',' ',':',' '};
+  CHAR8       Str6[] = {',',' ','"','m','s','g','"',' ',':',' ','"','S','B','_','E','v','e','n','t',' ','o','n',' ','E','x','i','t',' ','B','o','o','t',' ','S','e','r','v','i','c','e','s','"',' ','}','\r','\n','\0'};
+
+
+  // Create a message to be sent to com1
+  MemCpy (Buffer + i, Str1, sizeof(Str1));    //"SB_Event:"
+  i += sizeof(Str1);
+
+  MemCpy (Buffer + i, Str2, sizeof(Str2));    // "  Secure_Boot_Overall_Status: "
+  i += sizeof(Str2);
+  Buffer[i++] = mValidationFailed + '0';
+
+  MemCpy (Buffer + i, Str5, sizeof(Str5));    // "Status"
+  i += sizeof(Str5);
+
+  if(!mValidationFailed){
+    MemCpy (Buffer + i, Str3, sizeof(Str3));  // "Pass"
+    i += sizeof(Str3);
+  } else {
+    MemCpy (Buffer + i, Str4, sizeof(Str4));  // "Fail"
+    i += sizeof(Str4);
+  }
+
+  MemCpy (Buffer + i, Str6, sizeof(Str6));    // "msg" : "SB_Event on Exit Boot Services"
+
+  OrclSendMsg(Buffer);
+
+  return;
+}
+
+typedef struct {
+  CHAR16                                 *VariableName;
+  EFI_GUID                               *VendorGuid;
+} SB_VARIABLE_TYPE;
+
+SB_VARIABLE_TYPE  mSBVariableType[] = {
+  {EFI_IMAGE_SECURITY_DATABASE,  &gEfiImageSecurityDatabaseGuid},
+  {EFI_IMAGE_SECURITY_DATABASE1, &gEfiImageSecurityDatabaseGuid},
+  {EFI_IMAGE_SECURITY_DATABASE2, &gEfiImageSecurityDatabaseGuid},
+  {EFI_KEY_EXCHANGE_KEY_NAME,    &gEfiGlobalVariableGuid},
+  {EFI_PLATFORM_KEY_NAME,        &gEfiGlobalVariableGuid},
+};
+
+EFI_STATUS
+OrclSendSBVarDigestToConsole(void)
+{
+    EFI_STATUS  Status = EFI_SUCCESS;
+    VOID        *Data;
+    UINTN       DataSize;
+    UINT8       HashValue[SHA256_DIGEST_SIZE];
+    VOID        *Sha256Context;
+    UINTN       ContextDataSize;
+    UINTN       i;
+    UINT8       j, k;
+    UINT8       Buffer[196];
+    UINT8       temp;
+    UINT8       SecureVariableNameSize;
+    CHAR8       SBEvent[] = {'\r','\n','S','B','_','E','V','E','N','T',':',' ','{',' '};
+    CHAR8       VarName[] = {'"','S','B','_','V','a','r','i','a','b','l','e','_','N','a','m','e','"',' ',':',' ','"'};
+    CHAR8       Digest[] = {'"',',',' ','"','S','B','_','D','i','g','e','s','t','"',' ',':',' ','"'};
+    CHAR8       msg[] = {'"',',',' ','"','m','s','g','"',' ',':',' ','"','S','B','_','V','a','r','i','a','b','l','e',' ','D','i','g','e','s','t','"',' ','}','\r','\n','\0'};
+
+    k = 0;
+    while(k  < sizeof(mSBVariableType)/sizeof(mSBVariableType[0]))
+    {
+      Data = NULL;
+      SecureVariableNameSize = 0;
+      GetVariable2 (mSBVariableType[k].VariableName, mSBVariableType[k].VendorGuid, &Data, &DataSize);
+
+      if(Data != NULL){
+        ContextDataSize = Sha256GetContextSize ();
+        Sha256Context = AllocatePool(ContextDataSize);
+        ASSERT (Sha256Context != NULL);
+        Sha256Init   (Sha256Context);
+        Sha256Update (Sha256Context, Data, DataSize);
+        Sha256Final  (Sha256Context, HashValue);
+
+        i = 0;
+        MemCpy (Buffer + i, SBEvent, sizeof(SBEvent));
+        i += sizeof(SBEvent);
+
+        MemCpy (Buffer + i, VarName, sizeof(VarName));
+        i += sizeof(VarName);
+
+        while (mSBVariableType[k].VariableName[SecureVariableNameSize]) {
+          Buffer[i++] = (UINT8)mSBVariableType[k].VariableName[SecureVariableNameSize++];
+        }
+
+        MemCpy (Buffer + i, Digest, sizeof(Digest));
+        i += sizeof(Digest);
+
+        for (j=0; j<SHA256_DIGEST_SIZE; j++){
+          temp = HashValue[j] >> 4;
+          if(temp <= 9)
+            Buffer[i++] = temp + '0';
+          else
+            Buffer[i++] = temp + ('A'-10);
+          temp = HashValue[j] & 0xf;
+          if(temp <= 0x9)
+            Buffer[i++] = temp + '0';
+          else
+            Buffer[i++] = temp + ('A'-10);
+        }
+
+        MemCpy (Buffer + i, msg, sizeof(msg));
+
+        OrclSendMsg(Buffer);
+
+        FreePool(Sha256Context);
+
+        FreePool(Data);
+      }
+      k++;
+    }
+    return Status;
+}
+
+VOID
+OracleSendImageAuthorizationMsg (
+    IN UINT32                 Action,
+    IN CONST EFI_DEVICE_PATH_PROTOCOL   *FilePath,
+    IN UINT8                   ImageType,
+    IN UINT8                  *CertSubject,
+    IN EFI_STATUS             VerifyStatus
+    )
+{
+    UINT8         Code;
+    CHAR16       *FilePathStr;
+    UINTN         FilePathStrLen;
+    BOOLEAN       FreeFilePathStr = FALSE;
+    UINT8        *Buffer;
+    UINT16        i, j;
+    UINT8         temp;
+    EFI_EVENT     ExitBootServicesEvent;
+    CHAR8         Str1[] = {'\r','\n','S','B','_','E','V','E','N','T',':',' ','{',' '};  // len=15
+    CHAR8         Str2[] = {'"','E','F','I','_','I','m','a','g','e','_','T','y','p','e','"',' ',':',' '}; // 20
+    CHAR8         Str3[] = {'"','E','F','I','_','I','m','a','g','e','_','P','a','t','h','"',' ',':',' ','"'}; // 21
+    CHAR8         Str4[] = {'"',',',' ','"','S','B','_','V','a','r','i','a','b','l','e','_','M','a','t','c','h','"',' ',':',' '}; //26
+    CHAR8         Str5[] = {' ','}','\r','\n','\0'}; // 5
+    CHAR8         Str6[] = {',',' ','"','C','e','r','t','S','u','b','j','e','c','t','"',' ',':',' ','"'}; // 20
+    CHAR8         Str7[] = {'"',',',' ','"','I','m','a','g','e','D','i','g','e','s','t','"',' ',':',' ','"'}; // 21
+    CHAR8         Str8[] = {'"','N','O','_','C','E','R','T','_','C','H','E','C','K','"'};
+    CHAR8         Str9[] = {'"','N','O','_','C','E','R','T','_','M','A','T','C','H','"'};
+    CHAR8         Str10[] = {'"','D','B','X','_','C','E','R','T','_','M','A','T','C','H','"'}; // 16
+    CHAR8         Str11[] = {'"','D','B','_','C','E','R','T','_','M','A','T','C','H','"'};
+    CHAR8         Str12[] = {'"','U','n','k','n','o','w','n','"',',',' '};
+    CHAR8         Str13[] = {'"','F','r','o','m','F','V','"',',',' '};
+    CHAR8         Str14[] = {'"','F','r','o','m','O','p','R','O','M','"',',',' '};
+    CHAR8         Str15[] = {'"','F','r','o','m','R','e','m','o','v','a','b','l','e','M','e','d','i','a','"',',',' '}; // 22
+    CHAR8         Str16[] = {'"','F','r','o','m','F','i','x','e','d','M','e','d','i','a','"',',',' '};
+    CHAR8         Str17[] = {'"','m','s','g','"',':',' '}; // 7
+    CHAR8         Str18[] = {'<','H','A','S','H','_','M','A','T','C','H','>'};
+    CHAR8         Str19[] = {'"','T','h','e',' ','E','F','I',' ','e','x','e','c','u','t','a','b','l','e',' ','l','o','a','d','e','d',' ','s','u','c','c','e','s','s','f','u','l','l','y','"',',',' '};
+    CHAR8         Str20[] = {'"','T','h','e',' ','E','F','I',' ','e','x','e','c','u','t','a','b','l','e',' ','f','a','i','l','e','d',' ','t','o',' ','l','o','a','d','.',' ','I','t','s',' ','s','i','g','n','a','t','u','r','e',' ','(','o','r',' ','h','a','s','h',')',' ','m','a','t','c','h','e','d',' ','e','n','t','r','i','e','s',' ','i','n',' ','t','h','e',' ','D','B','X','"',',',' '} ;
+    CHAR8         Str21[] = {'"','O','r','a','c','l','e',' ','c','o','n','f','i','g','u','r','a','t','i','o','n',' ','r','e','q','u','i','r','e','s',' ','t','h','a','t',' ','t','h','e',' ','E','F','I',' ','e','x','e','c','u','t','a','b','l','e',' ','a','l','w','a','y','s',' ','l','o','a','d','s','.',' ','N','o',' ','v','a','l','i','d','a','t','i','o','n',' ','o','f',' ','t','h','e',' ','i','m','a','g','e',' ','w','a','s',' ','p','e','r','f','o','r','m','e','d','"',',',' '}; // 113
+    CHAR8         Str22[] = {'"','O','r','a','c','l','e',' ','c','o','n','f','i','g','u','r','a','t','i','o','n',' ','r','e','q','u','i','r','e','s',' ','t','h','a','t',' ','t','h','e',' ','E','F','I',' ','e','x','e','c','u','t','a','b','l','e',' ','n','e','v','e','r',' ','l','o','a','d','s','.',' ','N','o',' ','v','a','l','i','d','a','t','i','o','n',' ','o','f',' ','t','h','e',' ','i','m','a','g','e',' ','w','a','s',' ','p','e','r','f','o','r','m','e','d','"',',',' '};
+    CHAR8         Str23[] = {'"','T','h','e',' ','E','F','I',' ','e','x','e','c','u','t','a','b','l','e',' ','f','a','i','l','e','d',' ','t','o',' ','l','o','a','d','.',' ','I','t','\'','s',' ','n','o','t',' ','s','i','g','n','e','d',',',' ','o','r',' ','t','h','e',' ','s','i','g','n','a','t','u','r','e',' ','(','o','r',' ','h','a','s','h',')',' ','d','i','d',' ','n','o','t',' ','m','a','t','c','h',' ','e','n','t','r','i','e','s',' ','i','n',' ','D','B','"',',',' '};
+    CHAR8         Str24[] = {'"','s','t','a','t','u','s','"',':',' '}; // 10
+    CHAR8         Str25[] = {'"','P','a','s','s','"',',',' '};
+    CHAR8         Str26[] = {'"','F','a','i','l','"',',',' '}; // 8
+    CHAR8         Str27[] = {'(','E','F','I','_','S','U','C','C','E','S','S',')','"'};
+    CHAR8         Str28[] = {'(','E','F','I','_','A','C','C','E','S','S','_','D','E','N','I','E','D',')','"'}; // 20
+
+
+    if ( !mOracleOCIEnabled || mSecureBootEnable == SECURE_BOOT_MODE_UNKNOWN ||
+        (mSBLogInitComplete && mSecureBootEnable == SECURE_BOOT_MODE_DISABLE))
+      return;
+
+    if (!mSBLogInitComplete) {
+
+      // NOTE - this init cannot be done from the Constructor as it executes too early in boot flow
+
+      OracleSendSBAttemptStatus(); // NOTE: we want to do this one time when we get first Secureboot ENABLE or DISABLE read.
+
+      if (mSecureBootEnable == SECURE_BOOT_MODE_DISABLE) {
+        mSBLogInitComplete = TRUE;
+        return;
+      }
+
+      OrclSendSBVarDigestToConsole();
+
+      gBS->CreateEvent (
+         EVT_SIGNAL_EXIT_BOOT_SERVICES,
+         TPL_CALLBACK,
+         OrclSblOnExitBootServices,
+         NULL,
+         &ExitBootServicesEvent
+         );
+
+      mSBLogInitComplete = TRUE;
+    }
+
+    // Skip logging FromFV type images as it generates too many useless messages to the console
+    // Also skip UNKNOWN types
+    if (ImageType == IMAGE_FROM_FV || ImageType == IMAGE_UNKNOWN)
+      return;
+
+    if (Action == EFI_IMAGE_EXECUTION_AUTH_UNTESTED)
+      Code = NO_CERT_CHECK;
+    else if (VerifyStatus == EFI_SUCCESS)
+      Code = DB_CERT_MATCH;
+    else if (Action == EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND)
+       Code = DBX_CERT_MATCH;
+    else
+       Code = NO_CERT_MATCH;
+
+    // Record Overall Validation Status
+    if(EFI_ERROR (VerifyStatus) && ((Code == NO_CERT_MATCH) || (Code == DBX_CERT_MATCH)))
+        mValidationFailed = TRUE;
+
+    FilePathStr = ConvertDevicePathToText (FilePath, FALSE, TRUE); // Returned string is NULL terminated
+    if (FilePathStr == NULL)
+      FilePathStr = L"<NOT FOUND>";
+    else
+      FreeFilePathStr = TRUE;
+
+    FilePathStrLen = StrLen(FilePathStr);
+
+    // Convert backslash chars in the device path as they are not compliant with JSON encoding
+    for (i=0; i < FilePathStrLen; i++)
+      if (FilePathStr[i] == L'\\')
+        FilePathStr[i] = L'/';
+
+#define MAX_DEVICEPATH_LEN 68 // This is the max devicepath len we can allow without overflowing the 512 byte buffer.
+    // Alloc the message buffer to cover all the above Str?? arrays (330) + Max FilePathStrLen (MAX_DEVICEPATH_LEN) +
+    // Max Cert Subject (50) + img digest (64) (See below) - which is almost 512 bytes (which is max we can use for iLOM).
+    Buffer = AllocatePool(512);
+    if (Buffer == NULL) {
+      DEBUG ((DEBUG_ERROR, "DxeImageVerificationLib: Failed to alloc SB Event Buffer.\n"));
+      if (FreeFilePathStr)
+        FreePool(FilePathStr);
+      return;
+    }
+
+    i=0;
+    MemCpy (Buffer + i, Str1, sizeof(Str1));    //"SB_Event:"
+    i += sizeof(Str1);
+
+    MemCpy (Buffer + i, Str24, sizeof(Str24));    // "status":
+    i += sizeof(Str24);
+
+    if (VerifyStatus == EFI_SUCCESS) {
+      MemCpy (Buffer + i, Str25, sizeof(Str25));  // "Pass",
+      i += sizeof(Str25);
+    } else {
+      MemCpy (Buffer + i, Str26, sizeof(Str26));  // "Fail",
+      i += sizeof(Str26);
+    }
+    // copy 'Human readable string'
+    MemCpy (Buffer + i, Str17, sizeof(Str17));  // "msg":
+    i += sizeof(Str17);
+
+    switch(Code){
+    case DB_CERT_MATCH:
+      MemCpy (Buffer + i, Str19, sizeof(Str19));
+      i += sizeof(Str19);
+      break;
+    case DBX_CERT_MATCH:
+      MemCpy (Buffer + i, Str20, sizeof(Str20));
+      i += sizeof(Str20);
+      break;
+    case NO_CERT_MATCH:
+      MemCpy (Buffer + i, Str23, sizeof(Str23));
+      i += sizeof(Str23);
+      break;
+    case NO_CERT_CHECK:
+      if(VerifyStatus == EFI_SUCCESS){
+        MemCpy (Buffer + i, Str21, sizeof(Str21));
+        i += sizeof(Str21);
+      } else {
+        MemCpy (Buffer + i, Str22, sizeof(Str22));
+        i += sizeof(Str22);
+      }
+      break;
+    default:
+        break;
+    }
+
+    MemCpy (Buffer + i, Str2, sizeof(Str2));    // "ImageType: "
+    i += sizeof(Str2);
+
+    switch(ImageType){
+    case IMAGE_FROM_FV:
+      MemCpy (Buffer + i, Str13, sizeof(Str13));
+      i += sizeof(Str13);
+      break;
+    case IMAGE_FROM_OPTION_ROM:
+      MemCpy (Buffer + i, Str14, sizeof(Str14));
+      i += sizeof(Str14);
+      break;
+    case IMAGE_FROM_REMOVABLE_MEDIA:
+      MemCpy (Buffer + i, Str15, sizeof(Str15));
+      i += sizeof(Str15);
+      break;
+    case IMAGE_FROM_FIXED_MEDIA:
+      MemCpy (Buffer + i, Str16, sizeof(Str16));
+      i += sizeof(Str16);
+      break;
+    case IMAGE_UNKNOWN:
+    default:
+      MemCpy (Buffer + i, Str12, sizeof(Str12));
+      i += sizeof(Str12);
+      break;
+    }
+
+    MemCpy (Buffer + i, Str3, sizeof(Str3));    // "  File/Device Path: "
+    i += sizeof(Str3);
+    if (FilePathStrLen <= MAX_DEVICEPATH_LEN) {
+      for (j=0; j < FilePathStrLen; j++)
+        Buffer[i++] = (UINT8)FilePathStr[j];
+    } else {
+      for (j=0; j < MAX_DEVICEPATH_LEN/2; j++)
+        Buffer[i++] = (UINT8)FilePathStr[j];
+      MemCpy (Buffer + i, (UINT8 *)" ... ", 5);
+      i += 5;
+      for (j=0; j < (MAX_DEVICEPATH_LEN/2 - 5); j++)
+        Buffer[i++] = (UINT8) FilePathStr[FilePathStrLen - (MAX_DEVICEPATH_LEN/2 - 5) + j];
+    }
+
+    MemCpy (Buffer + i, Str4, sizeof(Str4));    // "  DB/DBX Match: "
+    i += sizeof(Str4);
+    switch(Code){
+    case NO_CERT_CHECK:
+      MemCpy (Buffer + i, Str8, sizeof(Str8));
+      i += sizeof(Str8);
+      if (VerifyStatus == EFI_SUCCESS){
+        MemCpy (Buffer + i, Str27, sizeof(Str27));
+        i += sizeof(Str27);
+      } else {
+        MemCpy (Buffer + i, Str28, sizeof(Str28));
+        i += sizeof(Str28);
+      }
+      break;
+    case NO_CERT_MATCH:
+      MemCpy (Buffer + i, Str9, sizeof(Str9));
+      i += sizeof(Str9);
+      break;
+    case DBX_CERT_MATCH:
+      MemCpy (Buffer + i, Str10, sizeof(Str10));
+      i += sizeof(Str10);
+      break;
+    case DB_CERT_MATCH:
+      MemCpy (Buffer + i, Str11, sizeof(Str11));
+      i += sizeof(Str11);
+      break;
+    default:
+      break;
+    }
+
+    if(Code == DB_CERT_MATCH || Code == DBX_CERT_MATCH){
+      MemCpy (Buffer + i, Str6, sizeof(Str6));    //"  CertSubject: "
+      i += sizeof(Str6);
+      if (CertSubject) {
+        // Copy up to 50 bytes of Cert Subject
+        for (j=0; CertSubject[j] && j < 50; j++)
+          Buffer[i++] = CertSubject[j];
+      } else {
+        MemCpy (Buffer + i, Str18, sizeof(Str18));
+        i += sizeof(Str18);
+      }
+
+    // add PE/COFF image hash
+      MemCpy (Buffer + i, Str7, sizeof(Str7));    // "  ImageDigest: "
+      i += sizeof(Str7);
+      for (j=0; j < mImageDigestSize; j++){
+        temp = mImageDigest[j] >> 4;
+        if(temp <= 0x9)
+          Buffer[i++] = temp + '0';
+        else
+          Buffer[i++] = temp + ('A'-10);
+
+        temp = mImageDigest[j] & 0xf;
+        if(temp <= 0x9)
+          Buffer[i++] = temp + '0';
+        else
+          Buffer[i++] = temp + ('A'-10);
+      }
+      Buffer[i++] = '"';
+    }
+
+    MemCpy (Buffer + i, Str5, sizeof(Str5));
+
+    OrclSendMsg(Buffer);
+
+    if (FreeFilePathStr)
+      FreePool(FilePathStr);
+
+    return ;
+}
+
+
 /**
   Reads contents of a PE/COFF image in memory buffer.
 
@@ -1245,7 +1790,8 @@ Done:
 BOOLEAN
 IsForbiddenByDbx (
   IN UINT8  *AuthData,
-  IN UINTN  AuthDataSize
+  IN UINTN                  AuthDataSize,
+  OUT UINT8                **CertSubject
   )
 {
   EFI_STATUS          Status;
@@ -1268,6 +1814,8 @@ IsForbiddenByDbx (
   UINT8               *CertPtr;
   UINT8               *Cert;
   UINTN               CertSize;
+  UINT8                     *MatchCert;
+  UINTN                     MatchCertSize;
   EFI_TIME            RevocationTime;
 
   //
@@ -1284,6 +1832,8 @@ IsForbiddenByDbx (
   BufferLength      = 0;
   TrustedCert       = NULL;
   TrustedCertLength = 0;
+  MatchCert         = NULL;
+  MatchCertSize     = 0;
 
   //
   // The image will not be forbidden if dbx can't be got.
@@ -1342,6 +1892,8 @@ IsForbiddenByDbx (
                         mImageDigestSize
                         );
         if (IsForbidden) {
+          MatchCert = RootCert;
+          MatchCertSize = RootCertSize;
           DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: Image is signed but signature is forbidden by DBX.\n"));
           goto Done;
         }
@@ -1418,6 +1970,10 @@ IsForbiddenByDbx (
   IsForbidden = FALSE;
 
 Done:
+
+  if (IsForbidden && MatchCert)
+    OracleGetCertSubject ((EFI_SIGNATURE_DATA  *)MatchCert, MatchCertSize, CertSubject);
+
   if (Data != NULL) {
     FreePool (Data);
   }
@@ -1441,7 +1997,8 @@ Done:
 BOOLEAN
 IsAllowedByDb (
   IN UINT8  *AuthData,
-  IN UINTN  AuthDataSize
+  IN UINTN              AuthDataSize,
+  OUT UINT8            **CertSubject
   )
 {
   EFI_STATUS          Status;
@@ -1458,6 +2015,8 @@ IsAllowedByDb (
   UINTN               DbxDataSize;
   UINT8               *DbxData;
   EFI_TIME            RevocationTime;
+  UINT8                     *MatchCert;
+  UINTN                     MatchCertSize;
 
   Data         = NULL;
   CertList     = NULL;
@@ -1466,6 +2025,8 @@ IsAllowedByDb (
   DbxData      = NULL;
   RootCertSize = 0;
   VerifyStatus = FALSE;
+  MatchCert         = NULL;
+  MatchCertSize     = 0;
 
   //
   // Fetch 'db' content. If 'db' doesn't exist or encounters problem to get the
@@ -1547,6 +2108,8 @@ IsAllowedByDb (
                          mImageDigestSize
                          );
         if (VerifyStatus) {
+          MatchCert = RootCert;
+          MatchCertSize = RootCertSize;
           //
           // The image is signed and its signature is found in 'db'.
           //
@@ -1593,6 +2156,8 @@ Done:
 
   if (VerifyStatus) {
     SecureBootHook (EFI_IMAGE_SECURITY_DATABASE, &gEfiImageSecurityDatabaseGuid, CertList->SignatureSize, CertData);
+    if (MatchCert)
+      OracleGetCertSubject ((EFI_SIGNATURE_DATA *)MatchCert, MatchCertSize, CertSubject);
   }
 
   if (Data != NULL) {
@@ -1671,8 +2236,6 @@ DxeImageVerificationHandler (
   EFI_IMAGE_EXECUTION_ACTION    Action;
   WIN_CERTIFICATE               *WinCertificate;
   UINT32                        Policy;
-  UINT8                         SecureBoot;
-  UINTN                         SecureBootSize;
   PE_COFF_LOADER_IMAGE_CONTEXT  ImageContext;
   UINT32                        NumberOfRvaAndSizes;
   WIN_CERTIFICATE_EFI_PKCS      *PkcsCertData;
@@ -1687,9 +2250,14 @@ DxeImageVerificationHandler (
   RETURN_STATUS                 PeCoffStatus;
   EFI_STATUS                    HashStatus;
   EFI_STATUS                    DbStatus;
+  BOOLEAN                       IsFound;
+  UINT8                                ImageType;
+  UINT8                               *DBCertSubject = NULL;
+  UINT8                               *DBXCertSubject = NULL;
+  UINT8                               SecureBoot;
+  UINTN                               SecureBootSize;
   EFI_STATUS                    VarStatus;
   UINT32                        VarAttr;
-  BOOLEAN                       IsFound;
 
   SignatureList     = NULL;
   SignatureListSize = 0;
@@ -1700,10 +2268,26 @@ DxeImageVerificationHandler (
   IsVerified        = FALSE;
   IsFound           = FALSE;
 
+  SecureBootSize = sizeof (SecureBoot);
+
+  VarStatus = gRT->GetVariable (EFI_SECURE_BOOT_MODE_NAME, &gEfiGlobalVariableGuid, &VarAttr, &SecureBootSize, &SecureBoot);
+
+  if (VarStatus == EFI_NOT_FOUND)
+    mSecureBootEnable = SECURE_BOOT_MODE_UNKNOWN;
+  // Skip verification if SecureBoot is disabled but not AuditMode
+  else if ((VarStatus == EFI_SUCCESS) &&
+           (VarAttr == (EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS)) &&
+           (SecureBoot == SECURE_BOOT_MODE_DISABLE))
+    mSecureBootEnable = SECURE_BOOT_MODE_DISABLE;
+  else
+    mSecureBootEnable = SECURE_BOOT_MODE_ENABLE;
+
   //
   // Check the image type and get policy setting.
   //
-  switch (GetImageType (File)) {
+  ImageType = GetImageType (File);
+  switch (ImageType) {
+
     case IMAGE_FROM_FV:
       Policy = ALWAYS_EXECUTE;
       break;
@@ -1729,10 +2313,14 @@ DxeImageVerificationHandler (
   // If policy is always/never execute, return directly.
   //
   if (Policy == ALWAYS_EXECUTE) {
+    // "NO CERT CHECK"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_UNTESTED, File, ImageType, NULL, EFI_SUCCESS);
     return EFI_SUCCESS;
   }
 
   if (Policy == NEVER_EXECUTE) {
+    // "NO CERT CHECK"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_UNTESTED, File, ImageType, NULL, EFI_ACCESS_DENIED);
     return EFI_ACCESS_DENIED;
   }
 
@@ -1745,30 +2333,15 @@ DxeImageVerificationHandler (
     CpuDeadLoop ();
   }
 
-  SecureBootSize = sizeof (SecureBoot);
-  VarStatus      = gRT->GetVariable (EFI_SECURE_BOOT_MODE_NAME, &gEfiGlobalVariableGuid, &VarAttr, &SecureBootSize, &SecureBoot);
-  //
-  // Skip verification if SecureBoot variable doesn't exist.
-  //
-  if (VarStatus == EFI_NOT_FOUND) {
-    return EFI_SUCCESS;
-  }
-
-  //
-  // Skip verification if SecureBoot is disabled but not AuditMode
-  //
-  if ((VarStatus == EFI_SUCCESS) &&
-      (VarAttr == (EFI_VARIABLE_BOOTSERVICE_ACCESS |
-                   EFI_VARIABLE_RUNTIME_ACCESS)) &&
-      (SecureBoot == SECURE_BOOT_MODE_DISABLE))
-  {
+  if (mSecureBootEnable != SECURE_BOOT_MODE_ENABLE)
     return EFI_SUCCESS;
-  }
 
   //
   // Read the Dos header.
   //
   if (FileBuffer == NULL) {
+    // "NO CERT CHECK"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_UNTESTED, File, ImageType, NULL, EFI_ACCESS_DENIED);
     return EFI_ACCESS_DENIED;
   }
 
@@ -1787,6 +2360,8 @@ DxeImageVerificationHandler (
     //
     // The information can't be got from the invalid PeImage
     //
+    // "NO CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
     DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: PeImage invalid. Cannot retrieve image information.\n"));
     goto Failed;
   }
@@ -1810,6 +2385,8 @@ DxeImageVerificationHandler (
     //
     // It is not a valid Pe/Coff file.
     //
+    // "NO CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
     DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: Not a valid PE/COFF image.\n"));
     goto Failed;
   }
@@ -1841,6 +2418,8 @@ DxeImageVerificationHandler (
     // and not be reflected in the security data base "dbx".
     //
     if (!HashPeImage (HASHALG_SHA256)) {
+      // "NO CERT MATCH"
+      OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
       DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: Failed to hash this image using %s.\n", mHashTypeStr));
       goto Failed;
     }
@@ -1856,6 +2435,8 @@ DxeImageVerificationHandler (
       //
       // Image Hash is in forbidden database (DBX).
       //
+      // "DBX CERT MATCH"
+      OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
       DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: Image is not signed and %s hash of image is forbidden by DBX.\n", mHashTypeStr));
       goto Failed;
     }
@@ -1871,12 +2452,16 @@ DxeImageVerificationHandler (
       //
       // Image Hash is in allowed database (DB).
       //
+      // "DB CERT MATCH"
+      OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND, File, ImageType, NULL, EFI_SUCCESS);
       return EFI_SUCCESS;
     }
 
     //
     // Image Hash is not found in both forbidden and allowed database.
     //
+   // "NO CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
     DEBUG ((DEBUG_INFO, "DxeImageVerificationLib: Image is not signed and %s hash of image is not found in DB/DBX.\n", mHashTypeStr));
     goto Failed;
   }
@@ -1950,7 +2535,7 @@ DxeImageVerificationHandler (
     //
     // Check the digital signature against the revoked certificate in forbidden database (dbx).
     //
-    if (IsForbiddenByDbx (AuthData, AuthDataSize)) {
+    if (IsForbiddenByDbx (AuthData, AuthDataSize, &DBXCertSubject)) {
       Action     = EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED;
       IsVerified = FALSE;
       break;
@@ -1960,7 +2545,7 @@ DxeImageVerificationHandler (
     // Check the digital signature against the valid certificate in allowed database (db).
     //
     if (!IsVerified) {
-      if (IsAllowedByDb (AuthData, AuthDataSize)) {
+      if (IsAllowedByDb (AuthData, AuthDataSize, &DBCertSubject)) {
         IsVerified = TRUE;
       }
     }
@@ -2006,10 +2591,16 @@ DxeImageVerificationHandler (
   }
 
   if (IsVerified) {
+    // "DB CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND, File, ImageType, DBCertSubject, EFI_SUCCESS);
+    if (DBCertSubject)
+      FreePool(DBCertSubject);
     return EFI_SUCCESS;
   }
 
   if ((Action == EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED) || (Action == EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND)) {
+    // "DBX CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND, File, ImageType, DBXCertSubject, EFI_ACCESS_DENIED);
     //
     // Get image hash value as signature of executable.
     //
@@ -2026,8 +2617,12 @@ DxeImageVerificationHandler (
     CopyMem (&SignatureList->SignatureType, &mCertType, sizeof (EFI_GUID));
     Signature = (EFI_SIGNATURE_DATA *)((UINT8 *)SignatureList + sizeof (EFI_SIGNATURE_LIST));
     CopyMem (Signature->SignatureData, mImageDigest, mImageDigestSize);
+  } else {
+    // "NO CERT MATCH"
+    OracleSendImageAuthorizationMsg(EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND, File, ImageType, NULL, EFI_ACCESS_DENIED);
   }
 
+
 Failed:
   //
   // Policy decides to defer or reject the image; add its information in image
@@ -2044,6 +2639,12 @@ Failed:
     FreePool (SignatureList);
   }
 
+  if (DBCertSubject)
+    FreePool(DBCertSubject);
+
+  if (DBXCertSubject)
+    FreePool(DBXCertSubject);
+
   if (Policy == DEFER_EXECUTE_ON_SECURITY_VIOLATION) {
     return EFI_SECURITY_VIOLATION;
   }
@@ -2102,6 +2703,8 @@ DxeImageVerificationLibConstructor (
 {
   EFI_EVENT  Event;
 
+  SetOracleOCIEnabled();
+
   //
   // Register the event to publish the image execution table.
   //
diff --git a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.h b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.h
index 53fe343..9cfb356 100644
--- a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.h
+++ b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.h
@@ -23,6 +23,7 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include <Library/DevicePathLib.h>
 #include <Library/SecurityManagementLib.h>
 #include <Library/PeCoffLib.h>
+#include <Library/SerialPortLib.h>
 #include <Protocol/FirmwareVolume2.h>
 #include <Protocol/DevicePath.h>
 #include <Protocol/BlockIo.h>
@@ -30,6 +31,7 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include <Protocol/VariableWrite.h>
 #include <Guid/ImageAuthentication.h>
 #include <Guid/AuthenticatedVariableFormat.h>
+#include <Guid/EventGroup.h>
 #include <IndustryStandard/PeImage.h>
 
 #define EFI_CERT_TYPE_RSA2048_SHA256_SIZE  256
@@ -59,6 +61,11 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #define DENY_EXECUTE_ON_SECURITY_VIOLATION   0x00000004
 #define QUERY_USER_ON_SECURITY_VIOLATION     0x00000005
 
+#define NO_CERT_CHECK     0x00000000
+#define NO_CERT_MATCH     0x00000001
+#define DBX_CERT_MATCH    0x00000002
+#define DB_CERT_MATCH     0x00000003
+
 //
 // Support hash types
 //
diff --git a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.inf b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.inf
index 1e1a639..db3fc86 100644
--- a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.inf
+++ b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.inf
@@ -39,6 +39,7 @@
   MdeModulePkg/MdeModulePkg.dec
   CryptoPkg/CryptoPkg.dec
   SecurityPkg/SecurityPkg.dec
+  OvmfPkg/OvmfPkg.dec
 
 [LibraryClasses]
   MemoryAllocationLib
@@ -53,6 +54,8 @@
   SecurityManagementLib
   PeCoffLib
   TpmMeasurementLib
+  SerialPortLib
+  QemuFwCfgSimpleParserLib
 
 [Protocols]
   gEfiFirmwareVolume2ProtocolGuid       ## SOMETIMES_CONSUMES
